package com.fps.idl.Sensors;


/**
* com/fps/idl/Sensors/SensorPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from com/fps/idl/FPS.idl
* Saturday, 14 March 2015 9:23:59 AM EST
*/

public abstract class SensorPOA extends org.omg.PortableServer.Servant
 implements com.fps.idl.Sensors.SensorOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_name", new java.lang.Integer (0));
    _methods.put ("_get_current", new java.lang.Integer (1));
    _methods.put ("_set_current", new java.lang.Integer (2));
    _methods.put ("_get_currentReading", new java.lang.Integer (3));
    _methods.put ("_set_currentReading", new java.lang.Integer (4));
    _methods.put ("_get_zone", new java.lang.Integer (5));
    _methods.put ("_set_zone", new java.lang.Integer (6));
    _methods.put ("set_sensor_status", new java.lang.Integer (7));
    _methods.put ("get_sensor_status", new java.lang.Integer (8));
    _methods.put ("get_pair_name", new java.lang.Integer (9));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // Sensors/Sensor/_get_name
       {
         String $result = null;
         $result = this.name ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // Sensors/Sensor/_get_current
       {
         com.fps.idl.Sensors.WarningLevel $result = null;
         $result = this.current ();
         out = $rh.createReply();
         com.fps.idl.Sensors.WarningLevelHelper.write (out, $result);
         break;
       }

       case 2:  // Sensors/Sensor/_set_current
       {
         com.fps.idl.Sensors.WarningLevel newCurrent = com.fps.idl.Sensors.WarningLevelHelper.read (in);
         this.current (newCurrent);
         out = $rh.createReply();
         break;
       }

       case 3:  // Sensors/Sensor/_get_currentReading
       {
         com.fps.idl.Sensors.Reading $result = null;
         $result = this.currentReading ();
         out = $rh.createReply();
         com.fps.idl.Sensors.ReadingHelper.write (out, $result);
         break;
       }

       case 4:  // Sensors/Sensor/_set_currentReading
       {
         com.fps.idl.Sensors.Reading newCurrentReading = com.fps.idl.Sensors.ReadingHelper.read (in);
         this.currentReading (newCurrentReading);
         out = $rh.createReply();
         break;
       }

       case 5:  // Sensors/Sensor/_get_zone
       {
         String $result = null;
         $result = this.zone ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 6:  // Sensors/Sensor/_set_zone
       {
         String newZone = in.read_string ();
         this.zone (newZone);
         out = $rh.createReply();
         break;
       }

       case 7:  // Sensors/Sensor/set_sensor_status
       {
         com.fps.idl.Sensors.Status stat = com.fps.idl.Sensors.StatusHelper.read (in);
         this.set_sensor_status (stat);
         out = $rh.createReply();
         break;
       }

       case 8:  // Sensors/Sensor/get_sensor_status
       {
         com.fps.idl.Sensors.Status $result = null;
         $result = this.get_sensor_status ();
         out = $rh.createReply();
         com.fps.idl.Sensors.StatusHelper.write (out, $result);
         break;
       }

       case 9:  // Sensors/Sensor/get_pair_name
       {
         String $result = null;
         $result = this.get_pair_name ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Sensors/Sensor:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Sensor _this() 
  {
    return SensorHelper.narrow(
    super._this_object());
  }

  public Sensor _this(org.omg.CORBA.ORB orb) 
  {
    return SensorHelper.narrow(
    super._this_object(orb));
  }


} // class SensorPOA
