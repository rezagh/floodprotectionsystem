package com.fps.idl.LMS;


/**
* com/fps/idl/LMS/LMSPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from com/fps/idl/FPS.idl
* Saturday, 14 March 2015 9:23:59 AM EST
*/

public abstract class LMSPOA extends org.omg.PortableServer.Servant
 implements com.fps.idl.LMS.LMSOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_name", new java.lang.Integer (0));
    _methods.put ("_get_log", new java.lang.Integer (1));
    _methods.put ("add_Sensor", new java.lang.Integer (2));
    _methods.put ("get_currrent_alarm_status", new java.lang.Integer (3));
    _methods.put ("get_Sensors", new java.lang.Integer (4));
    _methods.put ("raise_Alarm", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // LMS/LMS/_get_name
       {
         String $result = null;
         $result = this.name ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 1:  // LMS/LMS/_get_log
       {
         com.fps.idl.LMS.Alarm $result[] = null;
         $result = this.log ();
         out = $rh.createReply();
         com.fps.idl.LMS.LogHelper.write (out, $result);
         break;
       }


  //assuming a sensor can belong to multiple zones
       case 2:  // LMS/LMS/add_Sensor
       {
         com.fps.idl.Sensors.Sensor aSensor = com.fps.idl.Sensors.SensorHelper.read (in);
         String zone = in.read_string ();
         this.add_Sensor (aSensor, zone);
         out = $rh.createReply();
         break;
       }

       case 3:  // LMS/LMS/get_currrent_alarm_status
       {
         String zone = in.read_string ();
         com.fps.idl.LMS.Alarm $result = null;
         $result = this.get_currrent_alarm_status (zone);
         out = $rh.createReply();
         com.fps.idl.LMS.AlarmHelper.write (out, $result);
         break;
       }

       case 4:  // LMS/LMS/get_Sensors
       {
         String $result[] = null;
         $result = this.get_Sensors ();
         out = $rh.createReply();
         com.fps.idl.LMS.SensorListHelper.write (out, $result);
         break;
       }

       case 5:  // LMS/LMS/raise_Alarm
       {
         com.fps.idl.LMS.Alarm aReading = com.fps.idl.LMS.AlarmHelper.read (in);
         this.raise_Alarm (aReading);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:LMS/LMS:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public LMS _this() 
  {
    return LMSHelper.narrow(
    super._this_object());
  }

  public LMS _this(org.omg.CORBA.ORB orb) 
  {
    return LMSHelper.narrow(
    super._this_object(orb));
  }


} // class LMSPOA
